[
{
	"uri": "https://hajsong.github.io/ATM2106/homework/homework_1/",
	"title": "Homework 1",
	"tags": [],
	"description": "",
	"content": "Computing the zonally averaged shortwave / longwave radiation for January and July\nYou can find the instruction of the homework and the example from the following link: https://colab.research.google.com/drive/1ixTv-Ov1xVFpM1q0aDjO_FyhLDB6i7gd\nIf you click the link, you may be asked to log in. Then log in Google Colaboratory with your Yonsei email.\nIf you are comfortable with other programming languages, please feel free to use them. The data file for Matlab can be obtained from:\n OLR data SWR data  The due date is March 27th (3\u0026frasl;27).\nPlease send the link of your Jupyter notebook page or the pdf to TA.\nIf there are any issues regarding the link to the Jupyter notebook file or data, please email me.\n"
},
{
	"uri": "https://hajsong.github.io/ATM2106/syllabus/",
	"title": "Syllabus",
	"tags": [],
	"description": "",
	"content": "This is a tentative schedule and can be changed as we progress the semester.   week  content  lecture note  homework    1   Preview of the course      2   A quick introduction to Python      3   The global energy budget      4   The atmosphere: vertical structure and stability      5   The atmosphere: mean states      6   The equation of motion      7   The balanced flow      8   Midterm Exam      9   General circulation of the atmosphere 1      10   General circulation of the atmosphere 2      11   Introduction to the Ocean      12   General circulation of the ocean 1      13   General circulation of the ocean 2      14   Atmosphere, Ocean and Climate      15   Presentation      16   Final exam      "
},
{
	"uri": "https://hajsong.github.io/ATM2106/homework/homework_2/",
	"title": "Homework 2",
	"tags": [],
	"description": "",
	"content": " Estimating geostrophic zonal wind using thermal wind equation\nYou can find the instruction of the homework and the example from here\nIf you are comfortable with other programming languages, please feel free to use them. The data file for Matlab can be obtained from:\n data  The due date is April 17th.\nPlease send the link of your Jupyter notebook page or the pdf to TA.\nIf there are any issues regarding the link to the Jupyter notebook file or data, please email me.\nMore information from TA about this homework (in Korean): HW#2 질문 답변 및 추가내용\n 온도풍이란? =\u0026gt; 두 등압면 사이의 지균풍의 차이\u2028(상층 지균풍과 하층 지균풍의 벡터차이) HW#2에서 지균풍을 계산할 때 pdf에 나와있는 온도풍 방정식을 사용하여 상층(200mb)과 하층(1000mb)의 차이를 계산하면 됩니다!\u2028 하층 지균풍은 0으로 가정\u2028 dT값은 해당 위도 1000mb ~ 200mb에서의 평균 온도값 사용\u2028 dT/dy 연직온도경도는 두 등압면 사이의 평균값으로 사용(상수)  참고사항\n T_u_inp.mat 파일이 업데이트 되었습니다. Python 외 matlab이나 다른 프로그램을 사용하는 학생들은 업데이트된\u2028파일을 이용해주세요!  "
},
{
	"uri": "https://hajsong.github.io/ATM2106/lectures/",
	"title": "Lectures",
	"tags": [],
	"description": "",
	"content": " Lectures Lecture materials will be uploaded on YSCEC weekly.\n"
},
{
	"uri": "https://hajsong.github.io/ATM2106/homework/homework_3/",
	"title": "Homework 3",
	"tags": [],
	"description": "",
	"content": "Computing the surface temperature trend\nThe data shows that the warming trend is greatest near the Arctic. In this homework, we get to make a plot showing the surface temperature trend and discuss the observed trends.\nYou can find the instruction of the homework and the example from here\n"
},
{
	"uri": "https://hajsong.github.io/ATM2106/python/basics/",
	"title": "Basics",
	"tags": [],
	"description": "",
	"content": " This is the code for python 2. There are some lines that do not work with python 3 because of the grammar changes.\nBasic introduction to python adapted from \u0026lsquo;data_containers.ipynb\u0026rsquo; by Eric Firing at Univ. of Hawaii\nLet\u0026rsquo;s start with numbers.\nNumbers and Booleans Python\u0026rsquo;s system of numbers is quite simple: there are\n integers floating point numbers complex numbers Boolean (True or False) types\n  The types are determined dynamically, so operations involving integers and floating point numbers yield floating point numbers.\nprint 1 + 2 print 1.0 + 2 print(1 + 2)  3 3.0 3  Division can be tricky because traditional computer languages use integer division on integers. This was the case by default with Python 2.\nprint 4/3 print 4.0/3  1 1.33333333333  There are some built-in functions that operate on numbers, e.g.:\nprint int(4/3) print round(4/3) print abs(4.2 - 5) # Note binary floating point inability # to represent a decimal number exactly. print pow(2, 3)  1 1.0 0.8 8  The pow() function can be replaced by\nprint 2**3  8  For more math functions, one can import the math module from the standard library:\nimport math print(math.sin(1)) print(math.sqrt(2))  0.841470984808 1.41421356237  We will rarely use the math module, however, because numpy provides the same functionality and much more.\nBoolean values are either True or False, and result from conditional expressions like this:\nprint(\u0026quot;1 \u0026gt; 2 is\u0026quot;, 1 \u0026gt; 2, \u0026quot;but 1 \u0026lt; 2 is\u0026quot;, 1 \u0026lt; 2)  ('1 \u0026gt; 2 is', False, 'but 1 \u0026lt; 2 is', True)  Here is a more complex conditional expression:\nprint(1 \u0026gt; 2 or 3 \u0026lt; 4)  True  Strings Python strings can be created with the str() function, and as literals using single quotes, double quotes, triple single quotes, or triple double quotes. The triples can enclose blocks of text spanning multiple lines. The following are all valid strings, each assigned to a variable name:\na = 'Single quotes' b = \u0026quot;Double quotes\u0026quot; c = \u0026quot;a string that has 'single quotes' inside it\u0026quot; d = \u0026quot;\u0026quot;\u0026quot;This is a multiline sentence string, ending with a linefeed. \u0026quot;\u0026quot;\u0026quot; e = ''' This is also valid. It starts and ends with a linefeed. ''' for example in (a, b, c, d, 3): print(example)  Single quotes Double quotes a string that has 'single quotes' inside it This is a multiline sentence string, ending with a linefeed. 3  Strings can be added (concatenated):\nprint(d + e)  This is a multiline sentence string, ending with a linefeed. This is also valid. It starts and ends with a linefeed.  Sequences: tuples and lists Tuples and lists are very general sequences\u0026ndash;that is, they are containers that preserve order, and they can contain any kind of object at all. There is one big practical difference: tuples are immutable, lists are mutable.\nTo create a tuple from scratch, use round parentheses and commas.\nt1 = (1, 2) t2 = (3, (4, 5), 7, 8, \u0026quot;some string\u0026quot;) print t1 print t2 print t1+t2 print t1*2  (1, 2) (3, (4, 5), 7, 8, 'some string') (1, 2, 3, (4, 5), 7, 8, 'some string') (1, 2, 1, 2)  Lists have many methods, and support addition and multiplication:\na = [\u0026quot;list1\u0026quot;, 1, 2] b = [\u0026quot;list2\u0026quot;, 3, 4] print a + b print a * 2 c = a.extend(b) # 'extend' adds elements to the end (assigning to c only to suppress printing) print a # This is identical to the sum, a + b, above. c = a.append(b) # 'append' addes the argument as a whole print a  ['list1', 1, 2, 'list2', 3, 4] ['list1', 1, 2, 'list1', 1, 2] ['list1', 1, 2, 'list2', 3, 4] ['list1', 1, 2, 'list2', 3, 4, ['list2', 3, 4]]  Sequences: indexing Lists, tuples, and strings all support the same indexing syntax.\n Python indexing starts from zero. A sequence of N elements therefore has indices ranging from 0 through N-1. Negative indices count backwards from the end; they are handled by adding N to the negative index, so -1 is the last element, -2 the one before that, etc. Basic indexing accesses a single element or a range (slice). A slice includes the start of a range but excludes the end. A slice has an optional step, for subsampling a range.  # Using the built-in \u0026quot;range\u0026quot; function, # make a list on which we can practice indexing: x = list(range(0, 100, 10)) print(x) print range(0,100,10)  [0, 10, 20, 30, 40, 50, 60, 70, 80, 90] [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]  Take the first 5 values, then the last 5 values:\nprint(x[:5]) print(x[-5:])  [0, 10, 20, 30, 40] [50, 60, 70, 80, 90]  See how easy that was? Now take every second value starting from the second (index 1):\nprint x[1::2]  [10, 30, 50, 70, 90] [40, 30, 20, 10, 0]  In the above examples we are indexing a list with a slice, so we are getting a list back, even if it has only one element in it, or if it is empty. If we want to get an element from the list, then we index with a single integer:\nprint(x[0]) print(x[-1])  0 90  "
},
{
	"uri": "https://hajsong.github.io/ATM2106/projects/",
	"title": "Projects",
	"tags": [],
	"description": "",
	"content": " The great Pacific garbage patch People found a high concentration of plastic debris in the middle of Pacific. Although those plastic debris are small enough not to be visible with naked eyes, the size of this \u0026lsquo;patch\u0026rsquo; can be as big as 700,000 km2, a size of Texas, USA.\nWhy is there a garbage patch in the middle of Pacific ocean where no human habitats are nearby? Arctic / Antarctic sea ice trend Under the changing climate, Arctic sea-ice and Antarctic sea-ice show very different trend. While Arctic sea-ice extent has been shrinking over the past few decades, Antarctic sea-ice extend shows the increasing trend.\nHow can we explain this?\nHurricane In the 2017, Atlantic hurricane season was one of the most destructive hurricane seasons on record.\nLots of people suffered from floods and wind damages caused by hurricane, and we even saw a high number of death toll.\nIs this something to do with global warming? Sea level rise Tide gauges and satellite observations revealed the global rising sea level trend, and the recent study finds that it has been accelerating in the last decade. (Link)\nThe sea level trend is quite variable in space with a striking positive trend in the western Pacific. What drives this spatial pattern of the sea level trend? (Mean sea level (MSL) trend estimated from the satellite observations.) Ozone hole The use of chlorofluorocarbons (CFCs) caused to ozone loss that impacts back to human by allowing more ultraviolet (UV) light.\nAnother important impact from the ozone hole is the ability to alter the atmospheric circulation.\nThe stratosphere becomes cooler when UV light is not absorbed as much as it was with more ozone. This results in larger temperature difference between equator and south pole. How does this change the climate in the Southern Hemisphere? CO2 flux Approximately 25% of anthropogenic CO2 has been taken up by the ocean. However, this does not mean that the ocean always takes up CO2 from the atmosphere.\nFor example, the mean air-sea CO2 map reveals that the ocean emits CO2 in the eastern Pacific as well as in the region south of 60 degree S in the Southern Ocean.\nWhat determines this spatial patterns? Particulate Matter (PM) and seasons It became normal to monitor the air quality before starting the day. The particulate matter (PM) data in the Seoul Metropolitan Area shows an interesting temporal evolution. The PM level has been continuously decreased since 2000 before it starts to go up after 2012. How could we understand and interpret this trend? (Fig. 1 in Kim et al. (2017), Scientific Reports)\nYour own projects You can choose the subject of the project. Possible subjects are\n Extreme weather events (flood, drought, \u0026hellip;) Fukushima nuclear power plant accident East Asia monsoon \nPlease get together with your team members and discuss what topic your group want to explore. You can pick any topics above or find your own topic. The assignment of the topic is first-come, first-served bases. If the topic your team want to do is picked up by another team, then your team have to pick something else. Please let me know the topic of your team before the midterm week.\n"
},
{
	"uri": "https://hajsong.github.io/ATM2106/homework/",
	"title": "Homework",
	"tags": [],
	"description": "",
	"content": " Homework will be uploaded in the course of the semester. "
},
{
	"uri": "https://hajsong.github.io/ATM2106/projects/final_guide/",
	"title": "Final project guide",
	"tags": [],
	"description": "",
	"content": " The guide for the final project Please refer the attached pdf file in preparation of the final project.\n  Final Project Guide   final_guide.pdf  (1083 ko)    "
},
{
	"uri": "https://hajsong.github.io/ATM2106/python/",
	"title": "Python",
	"tags": [],
	"description": "",
	"content": " Python Python is a programing language that becomes very popular in many areas. The earth sciences field is not an exception. If you want specific reason for the choice of Python in this class, here they are.\n Python has been gaining solid ground in earth sciences community. Python is light, efficient and fast! Python is free!  Python up there.. Python is free and has been distributed in many different ways. One of the most popular and recommended way to obtain it is through Anaconda software distribution, which provides platform-independent package management for Python and other software in self-contained user-specific environments.\nHowever, I want to explore cloud-based python environments like Colaboratory by Google. The main advantage of using online service is that you do not have to spend your time to install Python and configure its setting to be consistent with the one I propose. Also, everyone in the class will be on the same environments so that we are all share how we solve the problem without worrying about whether this will work on other systems.\nI have experienced a clould-based Python environment but not Colaboratory. So I hope that we all get to learn how to efficiently use this platform that, I think, becomes a major trend in computer sciences.\nEnough said. Let\u0026rsquo;s dive into Google Colaboratory!\nHow to set up your acount on Google Colaboratory  Create an account (possibly your Yonsei email account works well). Create a new Jupyter notebook. Save it. Check if your saved file is in your Google Drive.  "
},
{
	"uri": "https://hajsong.github.io/ATM2106/links/",
	"title": "Links",
	"tags": [],
	"description": "",
	"content": " You may find these online materials helpful.\nLink to the textbook webpage Atmosphere, Ocean, and Climate Dynamics\nComputing program  Programming in Meteorology in Fall 2018 Python Google Colaboratory Jupyter Notebook Programming in Meteorology  "
},
{
	"uri": "https://hajsong.github.io/ATM2106/",
	"title": "ATM2106",
	"tags": [],
	"description": "",
	"content": " Atmospheric and Oceanic Circulation  Course Description The atmosphere and ocean control the earth climate system by transporting energy, heat, momentum and gas, as well as exchanging them across two components. Atmospheric and Oceanic Circulation (ATM2106) course aims to understand the circulation of the air and sea, and the climate system as a whole. This course will use both classical type of lectures and the state-of-the-art computer programming language such as Python to enhance the learning experience.\nInstructor  Hajoon Song Office : Science Hall #544 email : hajsong@yonsei.ac.kr telephone : 02-2123-2579  Teaching assistant  Ajin Cho Office : Science Hall #532 email : ajin05@yonsei.ac.kr  Class  Science Hall #523 Lecture : Tue 16:00 - 17:50, Thu 14:00 - 14:50 TA lecture : Thu 15:00 - 15:50  Office hours Both Ajin and Hajoon will be happy to have office hours by appointment. Please email us!\nTarget students This course is appropriate for students in the sophomore or junior year who want to gain basic knowledge about the circulation in atmosphere and ocean and the interactions between two bodies.\nThe objective Upon the completion of this course, students will grasp the concept of atmospheric and oceanic circulations in the rotating earth. Then students will explain the current climate patterns and contemporary climate phenomena using the learnings from the classes. This descriptive course also provides an introduction to upper-level classes in the Department of Atmospheric Sciences.\nPrerequisite None, but the background in math and sciences is recommended.\nGrading  Homework : 30% Midterm : 30% Final exam (or project) : 30% Attendance and participation : 10%  Textbook Atmosphere, Ocean, and Climate Dynamics by John Marshall and R. Alan Plumb \n"
},
{
	"uri": "https://hajsong.github.io/ATM2106/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://hajsong.github.io/ATM2106/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]